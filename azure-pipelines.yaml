variables:
- name: resourceGroupName
  value: la-bre-cicd
- name: azureConnectionName
  value: lab-bre-demo-rg-sc
- name: recipientEmail
  value: user@example.com

stages:

- stage: Deploy_Infra
  jobs:
    - job: Bicep
      displayName: 'Deploy Infra'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Bicep Deployment'
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(azureConnectionName)'
            subscriptionId: '$(subscriptionId)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: $(resourceGroupName)
            location: 'Australia East'
            templateLocation: 'Linked artifact'
            csmFile: './infra/bicep/deploy.bicep'
            # csmParametersFile: '$(Pipeline.Workspace)/infra/bicep/deploy.bicepparam'
            deploymentMode: 'Incremental'
            deploymentName: 'DeployPipelineTemplate'

- stage: BuildPackage_LogicApp
  jobs:
    - job: BuildPackage_LogicApp
      displayName: 'Build and Package Logic App'
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: CmdLine@2
          displayName: 'Build Logic App'
          inputs:
            script: |
              cd MyLogicAppRulesWorkspace\Function
              dotnet restore .\RulesFunction.csproj
              dotnet build .\RulesFunction.csproj
        - task: CmdLine@2
          displayName: 'Prepare Logic App package file'
          inputs:
            script: |
                cd MyLogicAppRulesWorkspace\LogicApp
                mkdir .\staging
                xcopy .\Artifacts .\staging\Artifacts /E /I
                xcopy .\lib .\staging\lib /E /I
                xcopy .\PurchaseOrderWorkflow .\staging\PurchaseOrderWorkflow /E /I
                xcopy .\MyRulesWorkflow .\staging\MyRulesWorkflow /E /I
                copy connections.json .\staging\connections.json
                copy parameters.azure.json .\staging\parameters.json
                copy host.json .\staging\host.json
        - task: ArchiveFiles@2
          displayName: 'Create LogicApp zip package'
          inputs:
            rootFolderOrFile: 'MyLogicAppRulesWorkspace\LogicApp\staging'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/mylogicapp/mylogicapp-$(Build.BuildNumber).zip'
            replaceExistingArchive: true
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/mylogicapp'
            artifactName: LogicAppBRE

- stage: Deploy_LogicApp
  jobs:
    - job: Deploy_LogicApp
      displayName: 'Deploy Logic App'
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Artifact'
          inputs:
            artifact: LogicAppBRE
            path: '$(Build.ArtifactStagingDirectory)/mylogicapp'
        - task: AzureCLI@2
          displayName: 'Deploy Logic App from Zip'
          inputs:
            azureSubscription: '$(azureConnectionName)'
            scriptType: 'batch'
            scriptLocation: 'inlineScript'
            inlineScript: |
              cd $(Build.ArtifactStagingDirectory)\mylogicapp
              for /f "tokens=*" %%i in ('az deployment group show -n DeployPipelineTemplate -g %resourceGroupName% --query properties.outputs.logicAppName.value -o tsv') do set logicAppName=%%i
              az functionapp deploy --resource-group %resourceGroupName% --name %logicAppName% --src-path .\mylogicapp-$(Build.BuildNumber).zip --type zip
        - task: AzureCLI@2
          displayName: 'Configure Logic App settings'
          inputs:
            azureSubscription: '$(azureConnectionName)'
            scriptType: 'batch'
            scriptLocation: 'inlineScript'
            inlineScript: |
              cd $(Build.ArtifactStagingDirectory)\mylogicapp

              for /f "tokens=*" %%i in ('az deployment group show -n DeployPipelineTemplate -g %resourceGroupName% --query properties.outputs.logicAppName.value -o tsv') do set logicAppName=%%i
              for /f "tokens=*" %%i in ('az deployment group show -n DeployPipelineTemplate -g %resourceGroupName% --query properties.outputs.logicAppLocation.value -o tsv') do set logicAppLocation=%%i
              for /f "tokens=*" %%i in ('az account show --query id -o tsv') do set subscriptionId=%%i
              for /f "tokens=*" %%i in ('az deployment group show -n DeployPipelineTemplate -g %resourceGroupName% --query properties.outputs.outlookRuntimeConnectionUrl.value -o tsv') do set outlookConnUrl=%%i

              (
              echo {
              echo     "outlook-ConnectionRuntimeUrl": "%outlookConnUrl%",
              echo     "recipient_email": "%RECIPIENTEMAIL%",
              echo     "WORKFLOWS_SUBSCRIPTION_ID": "%SUBSCRIPTIONID%",
              echo     "WORKFLOWS_LOCATION_NAME": "%logicAppLocation%",
              echo     "WORKFLOWS_RESOURCE_GROUP_NAME": "%resourceGroupName%"
              echo }
              ) > appsettings.json

              type .\appsettings.json

              az functionapp config appsettings set --name %logicAppName% --resource-group $(resourceGroupName) --settings @.\appsettings.json --debug
              del appsettings.json